<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\ProductsCategories;
use App\Models\Products;
use App\Models\ProductsSales;

class ProductsSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏...');

        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        $categories = [
            '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' => 'electronics',
            '–û–¥–µ–∂–¥–∞' => 'clothing',
            '–î–æ–º –∏ –±—ã—Ç' => 'home',
            '–°–ø–æ—Ä—Ç' => 'sport',
        ];

        $createdCategories = [];
        
        foreach ($categories as $categoryName => $factoryState) {
            $category = ProductsCategories::factory()->withName($categoryName)->create();
            $createdCategories[$factoryState] = $category;
            $this->command->info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {$categoryName}");
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        $products = [];
        
        // –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ - 15 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $electronicsProducts = Products::factory()
            ->count(15)
            ->electronics()
            ->forCategory($createdCategories['electronics'])
            ->create();
        $products = array_merge($products, $electronicsProducts->toArray());

        // –û–¥–µ–∂–¥–∞ - 12 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $clothingProducts = Products::factory()
            ->count(12)
            ->clothing()
            ->forCategory($createdCategories['clothing'])
            ->create();
        $products = array_merge($products, $clothingProducts->toArray());

        // –î–æ–º –∏ –±—ã—Ç - 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $homeProducts = Products::factory()
            ->count(10)
            ->home()
            ->forCategory($createdCategories['home'])
            ->create();
        $products = array_merge($products, $homeProducts->toArray());

        // –°–ø–æ—Ä—Ç - 8 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $sportProducts = Products::factory()
            ->count(8)
            ->sport()
            ->forCategory($createdCategories['sport'])
            ->create();
        $products = array_merge($products, $sportProducts->toArray());

        $this->command->info('‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ' . count($products));

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        $totalSales = 0;
        
        foreach ($products as $product) {
            $productModel = Products::find($product['id']);
            
            // –ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–º–µ–µ—Ç –æ—Ç 1 –¥–æ 5 –ø—Ä–æ–¥–∞–∂
            $salesCount = fake()->numberBetween(1, 5);
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            for ($i = 0; $i < $salesCount; $i++) {
                $saleType = fake()->randomElement(['lastMonth', 'lastWeek', 'regular']);
                
                $sale = ProductsSales::factory()
                    ->forProduct($productModel);
                
                if ($saleType === 'lastMonth') {
                    $sale = $sale->lastMonth();
                } elseif ($saleType === 'lastWeek') {
                    $sale = $sale->lastWeek();
                }
                
                // –ò–Ω–æ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–∏–µ –ø—Ä–æ–¥–∞–∂–∏
                if (fake()->boolean(15)) { // 15% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    $sale = $sale->bulk();
                }
                
                $sale->create();
                $totalSales++;
            }
        }

        // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
        ProductsSales::factory()
            ->count(30)
            ->state(function (array $attributes) use ($products) {
                $randomProduct = fake()->randomElement($products);
                return [
                    'product_id' => $randomProduct['id'],
                    'price' => fake()->randomFloat(2, 
                        $randomProduct['price'] * 0.8, 
                        $randomProduct['price'] * 1.2
                    ),
                ];
            })
            ->create();

        $totalSales += 30;

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        $this->command->info('');
        $this->command->info('üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê === üìä');
        $this->command->info('üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ: ' . ProductsCategories::count());
        $this->command->info('üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ' . Products::count());
        $this->command->info('üí∞ –ü—Ä–æ–¥–∞–∂ —Å–æ–∑–¥–∞–Ω–æ: ' . ProductsSales::count());
        $this->command->info('');
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        foreach ($createdCategories as $key => $category) {
            $productCount = $category->products()->count();
            $salesCount = ProductsSales::whereHas('product', function ($query) use ($category) {
                $query->where('category_id', $category->id);
            })->count();
            
            $this->command->info("üìä {$category->name}: {$productCount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤, {$salesCount} –ø—Ä–æ–¥–∞–∂");
        }
        
        $this->command->info('');
        $this->command->info('üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    }
}
